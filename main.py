from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import os
import time
from config import BRAVE_PATH

TRADE_URL = "https://funpay.com/lots/81/trade"
LOGOUT_BUTTON_SELECTOR = "a.menu-item-logout[href*='logout']"
RAISE_BUTTON_SELECTOR = "button.js-lot-raise"
TIMEOUT = 30  # –£–≤–µ–ª–∏—á–∏–ª —Ç–∞–π–º–∞—É—Ç –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏

class FunPayAutoRaiser:
    def __init__(self):
        self.driver = self.setup_driver()
        self.wait = WebDriverWait(self.driver, TIMEOUT)

    def setup_driver(self):
        if not os.path.exists(BRAVE_PATH):
            raise FileNotFoundError(f"Brave –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {BRAVE_PATH}")
        options = Options()
        options.binary_location = BRAVE_PATH
        options.add_argument("--start-maximized")
        service = Service(ChromeDriverManager(driver_version="136.0.7103.94").install())
        driver = webdriver.Chrome(service=service, options=options)
        return driver

    def manual_login(self):
        """–ñ–¥—ë—Ç —Ä—É—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ –∫–Ω–æ–ø–∫–µ '–í—ã–π—Ç–∏'"""
        print("üîê –û—Ç–∫—Ä—ã–≤–∞–µ–º FunPay –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞...")
        self.driver.get("https://funpay.com/en/account/login")
        
        try:
            print("‚è≥ –û–∂–∏–¥–∞–µ–º —Ä—É—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–∏—â–µ–º –∫–Ω–æ–ø–∫—É '–í—ã–π—Ç–∏')...")
            self.wait.until(
                EC.presence_of_element_located((By.CSS_SELECTOR, LOGOUT_BUTTON_SELECTOR))
            )
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ (–∫–Ω–æ–ø–∫–∞ '–í—ã–π—Ç–∏' –Ω–∞–π–¥–µ–Ω–∞)!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            self.driver.quit()
            raise

    def raise_lot(self):
        """–ù–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ü–æ–¥–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'"""
        print("üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ—Ä–≥–æ–≤–ª–∏...")
        self.driver.get(TRADE_URL)
        
        try:
            print("üîé –ò—â–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–Ω—è—Ç–∏—è...")
            raise_button = self.wait.until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, RAISE_BUTTON_SELECTOR)))
            
            # –ü–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –∏ –∫–ª–∏–∫
            self.driver.execute_script(
                "arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", 
                raise_button)
            time.sleep(1)
            raise_button.click()
            print("‚úÖ –õ–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–Ω—è—Ç!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–Ω—è—Ç–∏–∏ –ª–æ—Ç–∞: {e}")
            self.driver.save_screenshot("error.png")
            raise

    def run(self, interval_hours=4):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º"""
        try:
            self.manual_login()
            while True:
                self.raise_lot()
                print(f"‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {interval_hours} —á–∞—Å–∞...")
                time.sleep(interval_hours * 3600)  
        except KeyboardInterrupt:
            print("\nüõë –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        finally:
            self.driver.quit()

if __name__ == "__main__":
    bot = FunPayAutoRaiser()
    bot.run()  