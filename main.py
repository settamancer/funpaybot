import json
import os
import time
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from config import BRAVE_PATH

COOKIES_FILE = "cookies.json"
TRADE_URL = "https://funpay.com/lots/81/trade"
LOGIN_URL = "https://funpay.com/en/account/login"
LOGOUT_BUTTON_SELECTOR = "a.menu-item-logout[href*='logout']"
RAISE_BUTTON_SELECTOR = "button.js-lot-raise"
TIMEOUT = 30

class FunPayAutoRaiser:
    def __init__(self):
        self.driver = None
        self.wait = None

    def setup_driver(self, headless=False):
        options = Options()
        options.binary_location = BRAVE_PATH
        if headless:
            options.add_argument("--headless=new")
            options.add_argument("--window-size=1920,1080")
        else:
            options.add_argument("--start-maximized")
        service = Service(ChromeDriverManager(driver_version="136.0.7103.94").install())
        driver = webdriver.Chrome(service=service, options=options)
        self.wait = WebDriverWait(driver, TIMEOUT)
        return driver

    def save_cookies(self, driver):
        with open(COOKIES_FILE, "w", encoding="utf-8") as f:
            json.dump(driver.get_cookies(), f, indent=2)
        print("üíæ Cookies —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")

    def load_cookies(self, driver):
        if not os.path.exists(COOKIES_FILE):
            return False
        try:
            with open(COOKIES_FILE, "r", encoding="utf-8") as f:
                cookies = json.load(f)
            driver.get("https://funpay.com")  # –ù—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –ø–µ—Ä–µ–¥ add_cookie
            for cookie in cookies:
                if "sameSite" in cookie and cookie["sameSite"] == "None":
                    cookie["sameSite"] = "Strict"
                try:
                    driver.add_cookie(cookie)
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ cookie: {e}")
            print("‚úÖ Cookies –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ cookies: {e}")
            return False

    def is_logged_in(self, driver):
        driver.get("https://funpay.com")
        try:
            self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, LOGOUT_BUTTON_SELECTOR)))
            return True
        except:
            return False

    def manual_login(self):
        print("üîê –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        self.driver = self.setup_driver(headless=False)
        self.driver.get(LOGIN_URL)

        try:
            print("‚è≥ –ñ–¥—ë–º –∫–Ω–æ–ø–∫—É '–í—ã–π—Ç–∏' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ö–æ–¥–∞...")
            self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, LOGOUT_BUTTON_SELECTOR)))
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            self.save_cookies(self.driver)
        finally:
            self.driver.quit()

    def raise_lot(self):
        print("üåê –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –≤ headless-—Ä–µ–∂–∏–º–µ...")
        self.driver = self.setup_driver(headless=True)
        self.load_cookies(self.driver)
        self.driver.get(TRADE_URL)

        try:
            print("üîé –ò—â–µ–º –∫–Ω–æ–ø–∫—É '–ü–æ–¥–Ω—è—Ç—å'...")
            raise_button = self.wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, RAISE_BUTTON_SELECTOR)))
            self.driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", raise_button)
            time.sleep(1)
            raise_button.click()
            print("‚úÖ –õ–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–Ω—è—Ç!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–Ω—è—Ç–∏–∏ –ª–æ—Ç–∞: {e}")
            self.driver.save_screenshot("raise_error.png")
        finally:
            self.driver.quit()

    def run(self, interval_hours=4):
        # –ï—Å–ª–∏ –Ω–µ—Ç cookies ‚Äî –ª–æ–≥–∏–Ω –≤—Ä—É—á–Ω—É—é
        if not os.path.exists(COOKIES_FILE):
            self.manual_login()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: cookies —Ä–∞–±–æ—á–∏–µ?
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies...")
        test_driver = self.setup_driver(headless=True)
        if not self.load_cookies(test_driver) or not self.is_logged_in(test_driver):
            print("‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.")
            test_driver.quit()
            self.manual_login()
        else:
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ cookies –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")
            test_driver.quit()

        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        try:
            while True:
                self.raise_lot()
                print(f"‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –ø–æ–¥–Ω—è—Ç–∏–µ —á–µ—Ä–µ–∑ {interval_hours} —á...")
                time.sleep(interval_hours * 3600)
        except KeyboardInterrupt:
            print("\nüõë –°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        finally:
            if self.driver:
                self.driver.quit()


if __name__ == "__main__":
    bot = FunPayAutoRaiser()
    bot.run()
